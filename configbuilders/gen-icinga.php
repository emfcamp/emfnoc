#!/usr/bin/php
<?php

/* david@davidc.net 20120824 */

chdir("/home/david/icinga-auto");

require_once 'Zend/Loader.php';

Zend_Loader::loadClass('Zend_Gdata');
Zend_Loader::loadClass('Zend_Gdata_ClientLogin');
Zend_Loader::loadClass('Zend_Gdata_Spreadsheets');
Zend_Loader::loadClass('Zend_Gdata_App_AuthException');
Zend_Loader::loadClass('Zend_Http_Client');

$email = "";
$password = "";

$spreadsheetName = "EMFCamp 2012 - Internet team";
$worksheetName = "Monitoring";

$client = Zend_Gdata_ClientLogin::getHttpClient($email, $password,
						  Zend_Gdata_Spreadsheets::AUTH_SERVICE_NAME);

$gdClient = new Zend_Gdata_Spreadsheets($client);
$feed = $gdClient->getSpreadsheetFeed();

$spreadsheetKey = null;
foreach ($feed->entries as $entry) {
  $bits = explode('/', $entry->id->text);
  //  echo $entry->title->text." -> ".$bits[5] ."\n";
  if ($entry->title->text == $spreadsheetName) {
    $spreadsheetKey = $bits[5];
    break;
  }
}
if (!$spreadsheetKey) die("Spreadsheet not found\n");

$query = new Zend_Gdata_Spreadsheets_DocumentQuery();
$query->setSpreadsheetKey($spreadsheetKey);
$feed = $gdClient->getWorksheetFeed($query);

$worksheetKey = null;
foreach ($feed->entries as $entry) {
  $bits = explode('/', $entry->id->text);
  //  echo $entry->title->text . " -> ".$bits[8] . "\n";
  if ($entry->title->text == $worksheetName) {
    $worksheetKey = $bits[8];
    break;
  }
}
if (!$worksheetKey) die("Worksheet not found\n");

$query = new Zend_Gdata_Spreadsheets_CellQuery();
$query->setSpreadsheetKey($spreadsheetKey);
$query->setWorksheetId($worksheetKey);
$minRow = 3;
$query->setMinRow($minRow);
$query->setMaxCol(6);
$feed = $gdClient->getCellFeed($query);
$maxRow = (int)$feed->getRowCount()->getText();

function getCell($feed, $col, $row)
{
  foreach ($feed->entries as $entry) {
    $cell = $entry->getCell();
    if ($cell->getColumn() == $col && $cell->getRow() == $row) {
      return $cell->getInputValue();
    }
  }

  return null;
}

class host {
  var $hostgroup;
  var $hostname;
}

$hosts = array();

for ($i = $minRow; $i <= $maxRow; ++$i) {
  $hostgroup = getCell($feed, 1, $i);
  $hostname = getCell($feed, 2, $i);

  if ($hostgroup && $hostname) {
    $host = new host;
    $host->hostgroup = $hostgroup;
    $host->hostname = $hostname;
    if (!in_array($host, $hosts)) {
      $hosts[] = $host;
    }
  }
}

@mkdir('auto');
$serviceGroups = array();

foreach ($hosts as $host) {
  @mkdir('auto/'.$host->hostgroup);

  $fp = fopen('auto/'.$host->hostgroup.'/'.$host->hostname.'.cfg', 'w');
  if (!$fp) die("Can't open $host->hostname for writing\n");

  $bits = explode('.', $host->hostgroup);
  $zone = $bits[0].'.emfcamp.org';;

  $icinga_name = $host->hostgroup.'.'.$host->hostname;

  // TODO parents?
  fputs($fp, "
# AUTOGENERATED by /home/david/icinga-auto/gen.php

define host {
	use		generic-host
	host_name	$icinga_name
	address		$host->hostname.$zone
	hostgroups	$host->hostgroup
}

");

  //Add all services for this host

  for ($i = $minRow; $i <= $maxRow; ++$i) {
    if ($host->hostgroup == getCell($feed, 1, $i)
	&& $host->hostname == getCell($feed, 2, $i)) {
      $service = getCell($feed, 3, $i);
      $params = getCell($feed, 4, $i);
      $serviceDescription = getCell($feed, 5, $i);
      $serviceGroup = getCell($feed, 6, $i);
      if ($serviceGroup)
	$serviceGroups[$serviceGroup] = true;

      switch ($service) {
      case 'telnet':
	addService('generic-telnet');
	break;
      case 'server':
	addService('generic-ssh');
	addService('generic-load');
	addService('generic-disk');
	addService('generic-time');
	break;
      case 'network':
	addService('generic-ssh');
	addService('generic-snmp-network');
	break;
      case 'ssh':
	addService('generic-ssh');
	break;
      case 'unbound':
	addService('generic-dns-resolver');
	addService('generic-dns-unbound');
	break;
      case 'nsd':
	addService('generic-dns-nsd');
	break;
      case 'bgp':
	addService('generic-bgp-all');
	break;
      case 'ifoperstatus':
	addService('generic-ifoperstatus', "	check_command	check_ifoperstatus!$params\n");
	break;
      case 'radius':
	addService('generic-radius', "	check_command	check_radius!$params!5!1812\n");
	break;
      case 'http':
	addService('generic-http');
	break;
      case 'ospf':
	addService('generic-ospf-neighbour',  "  check_command   check_ospf_neighbour!$params\n");
	break;
      case 'tcp':
	addService('generic-tcp', "	check_command	check_tcp!$params\n");
	break;
      case 'dhcp':
	addService('generic-dhcp-match', "	check_command	check_dhcp_match!$params\n");
	break;
      default:
	echo "Warning: unknown service $service for $host->hostname\n";
      }
    }
  }

  fclose($fp);
}

$fp = fopen('auto/servicegroups.cfg', 'w');
if (!$fp) die("Can't open servicegroups.cfg\n");

foreach ($serviceGroups as $serviceGroup => $wombat) {
  fputs($fp, "define servicegroup {
	servicegroup_name	$serviceGroup
}

");
}
fclose($fp);

echo "Moving into place...\n";
system("rm -fr /etc/icinga/auto");
system("mv auto /etc/icinga");
echo "Restarting icinga...\n";
system("/etc/init.d/icinga reload");
echo "Done\n";

function addService($serviceName, $extras = null)
{
  global $fp;
  global $icinga_name;
  fputs($fp, "define service {
	use		$serviceName
	host_name	$icinga_name
");

  global $serviceDescription;
  if ($serviceDescription) {
    fputs($fp, "	service_description	$serviceDescription\n");
  }
  global $serviceGroup;
  if ($serviceGroup) {
    fputs($fp, "	servicegroups	$serviceGroup\n");
  }

  fputs($fp, $extras."}

");
}
