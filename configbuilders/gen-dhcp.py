#!/usr/bin/env python3

# EMF dhcpd config generator

import ipaddr, time, os, sys, configparser

from nocsheet import login, get_worksheets, get_worksheet_data

if not os.path.exists("out"):
    os.mkdir("out")

configfile4 = "out/dhcpd-subnets.conf"
configfile6 = "out/dhcpd6-subnets.conf"

config = configparser.ConfigParser(interpolation=None)
if not config.read("/etc/emf-gdata.conf"):
    print("Warning: config file /etc/emf-gdata.conf could not be found or read")

spreadsheet = config.get("gdata", "noc_combined")

spr_client = login()

print("downloading Addressing")
ipv4 = get_worksheet_data(spr_client, spreadsheet, "Addressing")

f4 = open(configfile4, "w")
f6 = open(configfile6, "w")

f4.write("#\n")
f4.write("# generated by gen-dhcp.py from EMF2018 Google Spreadsheet\n")
f4.write("# %s %s\n" % (time.strftime("%m/%d/%Y"), time.strftime("%H:%M:%S")))
f4.write("#\n")

f6.write("#\n")
f6.write("# generated by gen-dhcp.py from EMF2018 Google Spreadsheet\n")
f6.write("# %s %s\n" % (time.strftime("%m/%d/%Y"), time.strftime("%H:%M:%S")))
f6.write("#\n")

scopes = 0


def write_zones(f4, f6, description, vlan, domain, ipv4, ipv6, hosts):
    f4.write("\n")
    f4.write("# %s\n" % (description))
    f4.write("shared-network vlan%s {\n" % (vlan))
    f4.write("  subnet %s netmask %s {\n" % (ipv4.network, ipv4.netmask))
    f4.write('    option domain-name "' + domain + '";\n')
    f4.write("    option domain-name-servers 78.158.87.11,78.158.87.12;\n")
    f4.write("    option routers %s;\n" % (ipv4.network + 1))

    if hosts:
        f4.write("    group {\n")
        for h in hosts:
            indent = " " * 8
            f4.write(indent + "host " + h["name"] + " {\n")
            indent = " " * 12
            f4.write(indent + "hardware ethernet " + h["mac"] + ";\n")
            f4.write(indent + "fixed-address " + h["ip"] + ";\n")
            if "extra" in h:
                f4.write(h["extra"])
            indent = " " * 8
            f4.write(indent + "}\n")
        f4.write("    }\n")

    f4.write("    pool {\n")
    f4.write('      failover peer "failover-partner";\n')
    f4.write("      range %s %s;\n" % (ipv4.network + 11, ipv4.broadcast - 1))
    f4.write("    }\n")
    f4.write("  }\n")
    f4.write("}\n")

    if not ipv6:
        return

    f6.write("\n")
    f6.write("# %s\n" % (description))
    f6.write("shared-network vlan%s {\n" % (vlan))
    f6.write("  subnet6 %s {\n" % (ipv6))
    # stateful and temporay addresses:
    if False:
        f6.write("    range6 %s %s;\n" % (ipv6.network + 0x11, ipv6.network + 0xFFF0))
        f6.write("    range6 %s temporary;\n" % (ipv6))
    f6.write('    option dhcp6.domain-search "' + domain + '";\n')
    f6.write("    option dhcp6.name-servers 2a05:e201:0:57::11,2a05:e201:0:57::12;\n")
    f6.write("    option dhcp6.sntp-servers 2a05:e201:0:57::11,2a05:e201:0:57::12;\n")
    f6.write("  }\n")
    f6.write("}\n")


prev_row = None
for row in ipv4:
    if "IPv4-Subnet" in row:
        if prev_row and "dhcp" in prev_row and prev_row["dhcp"] == "y":
            write_zones(
                f4,
                f6,
                prev_row["Description"],
                prev_row["VLAN"],
                prev_row["Domain"],
                prev_row["IPv4-Subnet"],
                prev_row["IPv6"],
                prev_row["Hosts"],
            )

        scopes += 1

        ipv4 = ipaddr.IPNetwork(row["IPv4-Subnet"])
        ipv6 = None
        if "IPv6" in row:
            ipv6 = ipaddr.IPNetwork(row["IPv6"])
        else:
            print("Warning: " + row["IPv4-Subnet"] + " has no v6 subnet")

        if "Domain" in row:
            domain = row["Domain"]
        else:
            domain = "emf.camp"
        if "Subdomain" in row:
            domain = row["Subdomain"] + "." + domain

        print("%s %s %s" % (ipv4, ipv6, domain))

        row["Domain"] = domain
        row["IPv4-Subnet"] = ipv4
        row["IPv6"] = ipv6
        row["Hosts"] = []
        row["HostUnique"] = {}

        prev_row = row
    elif "VLAN" not in row and "dhcp" in row and row["dhcp"] == "y" and "MAC" in row:
        # {'MAC': '00:1e:c9:74:2c:a8', 'Notes': 'from lhs', 'Hostname': 'crappydesktop', 'IPv4': '151.216.134.3', 'dns': 'y', 'dhcp': 'y'}
        things = {
            "name": row["Hostname"],
            "mac": row["MAC"],
            "ip": row["IPv4"],
        }
        if "DHCP Extra" in row:
            extra = row["DHCP Extra"]
            # mangle it to fix formatting and indenting
            extra = extra.split(";")
            o = []
            for e in extra:
                e = e.strip()
                if len(e) > 0:
                    o.append(e)
            extra = ""
            for e in o:
                extra += " " * 12
                extra += e + ";\n"
            things["extra"] = extra
        prev_row["Hosts"].append(things)
    if "VLAN" not in row and "IPv4" in row:
        if not ipaddr.IPNetwork(row["IPv4"]) in prev_row["IPv4-Subnet"]:
            print(
                "PANIC: ip "
                + row["IPv4"]
                + " not in subnet "
                + str(prev_row["IPv4-Subnet"])
            )
            sys.exit(1)
        if row["IPv4"] in prev_row["HostUnique"]:
            print(
                "WARNING: ip "
                + row["IPv4"]
                + " duplicated in "
                + str(prev_row["IPv4-Subnet"])
            )
        else:
            prev_row["HostUnique"][row["IPv4"]] = 1

# the last subnet.
if "dhcp" in prev_row:
    write_zones(
        f4,
        f6,
        prev_row["Description"],
        prev_row["VLAN"],
        prev_row["Domain"],
        prev_row["IPv4-Subnet"],
        prev_row["IPv6"],
        prev_row["Hosts"],
    )

f6.close()
f4.close()

print("Generated %s scopes" % (scopes))
