#!/usr/bin/env python

# EMF dhcpd config generator
import argparse
import ipaddress
import os
import sys
import time
from pprint import pprint

import click
import jinja2

from emfnoc import EmfNoc
from nbh import NetboxHelper

def write_header(file):
    file.write("#\n")
    file.write("# generated by gen-dhcp.py from EMF Netbox\n")
    #file.write("# %s %s\n" % (time.strftime("%Y-%m-%d"), time.strftime("%H:%M:%S")))
    file.write("#\n")


def get_scope_ipv4(prefix):
    network = ipaddress.IPv4Network(prefix.prefix)

    reserved = prefix.dhcp_reserved if 'dhcp_reserved' in prefix else 10
    pool_start = network.network_address + 1 + reserved
    pool_end = network.broadcast_address - 1

    vars = {
        'prefix': prefix,
        'network': network,
        'gateway': network.network_address + 1,  # TODO look up the SVI
        'pool_start': pool_start,
        'pool_end': pool_end
    }
    return vars
    pprint(prefix)
    network: ipaddress.IPv4Network = ipaddress.ip_network(prefix.prefix)
    pprint(type(prefix.prefix))
    pprint(network)

    # TODO GET STATIC ASSIGNMENTS FROM NETBOX
    hosts = None
    if False or hosts:
        file.write("    group {\n")
        for h in hosts:
            indent = " " * 8
            file.write(indent + "host " + h["name"] + " {\n")
            indent = " " * 12
            file.write(indent + "hardware ethernet " + h["mac"] + ";\n")
            file.write(indent + "fixed-address " + h["ip"] + ";\n")
            if "extra" in h:
                file.write(h["extra"])
            indent = " " * 8
            file.write(indent + "}\n")
        file.write("    }\n")

    sys.exit(1)


def get_scope_ipv6( prefix):
    network = ipaddress.IPv6Network(prefix.prefix)

    reserved = prefix.dhcp_reserved if 'dhcp_reserved' in prefix else 10
    pool_start = network.network_address + 1 + reserved
    pool_end = network.network_address + 0xfeff

    vars = {
        'prefix': prefix,
        'network': network,
        'gateway': network.network_address + 0xff00,  # TODO look up the SVI
        'pool_start': pool_start,
        'pool_end': pool_end
    }
    return vars


if __name__ == "__main__":
    helper = NetboxHelper.getInstance()

    parser = argparse.ArgumentParser(description='Generate Oxidized config.')

    args = parser.parse_args()

    config = EmfNoc.load_config()
    domain_campers = config['dhcpd']['domain_campers']
    domain_orga = config['dhcpd']['domain_orga']
    dns_ipv4 = config['dhcpd']['dns_ipv4']
    dns_ipv6 = config['dhcpd']['dns_ipv6']
    sntp_ipv6 = config['dhcpd']['sntp_ipv6']

    prefixes = helper.netbox.ipam.prefixes.filter(cf_dhcp=True)

    loader = jinja2.FileSystemLoader('templates')
    env = jinja2.Environment(loader=loader)
    template = env.get_template('dhcp_scope.j2')

    if not os.path.exists("out"):
        os.mkdir("out")

    configfile4 = "out/dhcpd-subnets.conf"
    configfile6 = "out/dhcpd6-subnets.conf"

    with open(configfile4, 'w') as f4,  open(configfile6, 'w') as f6:
        write_header(f4)
        write_header(f6)

        with click.progressbar(prefixes, label='Scopes',
                               item_show_func=lambda item: item['prefix'] if item else None) as bar:
            for prefix in bar:
                if prefix.family.value == 4:
                    vars = get_scope_ipv4(prefix)
                    vars['dns'] = dns_ipv4
                    file = f4
                elif prefix.family.value == 6:
                    vars = get_scope_ipv6(prefix)
                    vars['dns'] = dns_ipv6
                    vars['sntp'] = sntp_ipv6
                    file = f6

                vars['domain'] = domain_campers if 'Camper-' in prefix.description else domain_orga

                conf = template.render(vars) #.encode("utf-8", "replace")
                file.write(conf)


# TODO no doubt Ian will want special options on switch-mgmt vlan, need a nice way to insert these
